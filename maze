

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle, Circle

s =\
"""
++++++++++++++++++++++
+   +   ++ ++        +
  + + +     +++ +++ ++
+ + +  ++  ++++ +++ ++
+ + + + + ++    +++  +
+          ++  ++  + +
+++++ + +      ++  + +
+++++ +++  + +  ++   +
+          + +  + +  +
+++++ +  + + +     + +
++++++++++++++++++++++
"""

def make_maze_matrix(string:'str representation of the maze',
                     exit:'index of the exit as tuple'=None) -> np.ndarray:
    d = str.maketrans({'+':'1', ' ':'0'})
    s = string.strip().translate(d)
    mx = np.array([[int(e) for e in s] for s in s.strip().split('\n')], dtype="int8")
    if exit: mx[exit]=3
    return mx



def str_to_mx(s:"str representation of a maze") -> np.ndarray:
    d = str.maketrans({'+':'1', ' ':'0'})
    s = s.strip().translate(d)
    mx = [[int(e) for e in s] for s in s.strip().split('\n')]
    return np.array(mx, dtype='uint8')


class Maze:
    NORTH = 1
    SOUTH = 2
    WEST = 3
    EAST = 4


    def __init__(self, layout, moves):
        self._layout = layout
        self._starting_position = moves[0]
        self._moves = moves[1:]
        self._n_updates_per_move = 4
        self._step = 1/self._n_updates_per_move
        self.frames = len(self._moves) * self._n_updates_per_move
        self._skip_first_update = True  #bug?

    def update(self, frame):  # 1 move = 4 updates
        #must skip the furst zero update (matplotlib bug?)
        if frame==0 and self._skip_first_update:
            self._skip_first_update = False
            return

        ix = frame // self._n_updates_per_move
        direction = abs(self._moves[ix])
        x,y = self.circle.get_center()

        #leave a bread crumb
        drop_breadcrum = frame % self._n_updates_per_move == 0
        if drop_breadcrum:
            breadcrum = Circle(xy=(x, y), radius=0.1, color='yellow', zorder=1)
            self.sp.add_patch(breadcrum)

        #move the turtle further
        if direction == self.NORTH: y -= self._step
        elif direction == self.EAST: x += self._step
        elif direction == self.SOUTH: y += self._step
        elif direction == self.WEST: x -= self._step
        else: raise ValueError("bad direction")

        #check if bumped into a wall
        r,c = [int(y-0.5), int(x-0.5)]
        bumped = (self._layout[r,c] != 0)and(frame%self._n_updates_per_move==0)
        if bumped: print("going through the wall @", r,c)

        #update the turtle position on the plot
        self.circle.set_center([x,y])


    def go(self):
        from matplotlib.animation import FuncAnimation
        self.draw_maze()
        self.place_turtle()
        anim = FuncAnimation(self.fig, self.update, frames=self.frames, interval=67, repeat=False)
        plt.show()


    def draw_maze(self):
        mx = self._layout
        m,n = mx.shape
        fig = plt.figure()
        sp = fig.add_subplot(111)

        sp.set(xlim=(0,n), ylim=(m,0))
        sp.set(xticks=[], yticks=[])
        sp.set_facecolor("orange")

        #get indeces and draw bricks
        nx_row, nx_col = np.indices(mx.shape)
        MASK = mx==1
        nx = tuple(zip(nx_col[MASK], nx_row[MASK]))
        [sp.add_patch(Rectangle(xy=xy, width=1, height=1, color='brown', ec='k')) for xy in nx]
        self.fig = fig
        self.sp = sp
        return fig,sp

    def place_turtle(self):
        from matplotlib.patches import Circle
        y,x = self._starting_position
        circle = Circle(xy=(x+.5, y+.5), radius=0.3, color='darkblue', zorder=3)
        self.sp.add_patch(circle)
        self.circle = circle
        return circle




def solve_maze(layout, start=None):
    OBSTACLE = 1
    BREADCRUMB = 2
    EXIT = 3
    start = start or (5,9)
    assert layout[start] == 0, "bad starting position"




    moves = [start,]
    moves.extend([1,1,1,1,3,3,3,3,4,4,4,4,4,4,4])
    maze = Maze(layout, moves)
    maze.go()
    return moves










###################################




layout = make_maze_matrix(s, exit=(2,0))
solve_maze(layout, start=None)


