

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle

s =\
"""
++++++++++++++++++++++
+   +   ++ ++        +
  + + +     +++ +++ ++
+ + +  ++  ++++ +++ ++
+ + + + + ++    +++  +
+          ++  ++  + +
+++++ + +      ++  + +
+++++ +++  + +  ++   +
+          + +  + +  +
+++++ +  + + +     + +
++++++++++++++++++++++
"""


def str_to_mx(s:"str representation of a maze") -> np.ndarray:
    d = str.maketrans({'+':'1', ' ':'0'})
    s = s.strip().translate(d)
    mx = [[int(e) for e in s] for s in s.strip().split('\n')]
    return np.array(mx, dtype='uint8')


class Maze:
    def __init__(self, layout, moves):
        self._layout = layout
        self._starting_position = moves[0]
        self._moves = moves[1:]
    
    def update(self, frame):  # 1 move = 4 updates
        ix = frame
        #direction = self._moves[ix]
        #self.move(direction=direction)
        circle = self.circle    
        x,y = circle.get_center()
        x += 0.1
        circle.set_center([x,y])
        
        
    def go(self):
        from matplotlib.animation import FuncAnimation
        self.draw_maze()
        self.place_turtle()
        moves = self._moves
        anim = FuncAnimation(self.fig, self.update, frames=100, interval=67)
        plt.show()
    
    
    def draw_maze(self):
        mx = self._layout
        m,n = mx.shape
        fig = plt.figure()
        sp = fig.add_subplot(111)
    
        sp.set(xlim=(0,n), ylim=(m,0))
        sp.set(xticks=[], yticks=[])
        sp.set_facecolor("orange")
        
        #get indeces and draw bricks
        nx_row, nx_col = np.indices(mx.shape)
        MASK = mx==1
        nx = tuple(zip(nx_col[MASK], nx_row[MASK]))
        [sp.add_patch(Rectangle(xy=xy, width=1, height=1, color='brown', ec='k')) for xy in nx]
        self.fig = fig
        self.sp = sp
        return fig,sp
        
    def place_turtle(self):
        from matplotlib.patches import Circle
        y,x = self._starting_position
        circle = Circle(xy=(x+.5, y+.5), radius=0.3, color='darkblue')
        self.sp.add_patch(circle)
        self.circle = circle
        return circle
    
    def move(self, direction):
        pass
    
    
    
def solve_maze(layout):
    #choose starting position
    starting_position = (1,1)
    
    
    #initiate Maze
    moves = [starting_position, 0,1,2,3]  # go up, dowm left, right, drop breadcrum
    maze = Maze(layout, moves)
    maze.go()
    return moves
    
    



  

layout = str_to_mx(s)
solve_maze(layout)

























