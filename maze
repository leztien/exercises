
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle

s =\
"""
++++++++++++++++++++++
+   +   ++ ++        +
  + + +     +++ +++ ++
+ + +  ++  ++++ +++ ++
+ + + + + ++    +++  +
+          ++  ++  + +
+++++ + +      ++  + +
+++++ +++  + +  ++   +
+          + +  + +  +
+++++ +  + + +     + +
++++++++++++++++++++++
"""


def str_to_mx(s:"str representation of a maze") -> np.ndarray:
    d = str.maketrans({'+':'1', ' ':'0'})
    s = s.strip().translate(d)
    mx = [[int(e) for e in s] for s in s.strip().split('\n')]
    return np.array(mx, dtype='uint8')
    

def draw_maze(mx):
    m,n = mx.shape
    sp = plt.axes()
    #sp.axis('equal')
    sp.set(xlim=(0,n), ylim=(m,0))
    sp.set(xticks=[], yticks=[])
    sp.set_facecolor("orange")
    
    #get indeces and draw bricks
    nx_row, nx_col = np.indices(mx.shape)
    MASK = mx==1
    nx = tuple(zip(nx_col[MASK], nx_row[MASK]))
    [sp.add_patch(Rectangle(xy=xy, width=1, height=1, color='brown', ec='k')) for xy in nx]
    return sp


mx = str_to_mx(s)
sp = draw_maze(mx)

#######################

#%matplotlib nbagg
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from matplotlib.patches import Circle, Rectangle


def update(ix, mx, line):   # ix = frame number
    global circle

    x,y = circle.get_center()
    x += 0.1
    circle.set_center([x,y])

    line.set_data(*mx[:ix].T)  # mx.shape = (2,100)
    return line,

###############################################

#figure
fig = plt.figure()
plt.axis([0,10, 0,10])
plt.xticks([]); plt.yticks([])
sp = plt.gca()

#rectangles
rectangle = Rectangle(xy=(2,3), width=1, height=1)
sp.add_patch(rectangle)

#circle
circle = Circle(xy=(5,5), radius=0.2)
plt.gca().add_patch(circle)

#sinusoid
x = np.linspace(0, 10, 100)
y = (np.sin(x)*3)+3
mx = np.c_[x,y]
line, = plt.plot([], "r-")   # start with an empty plot

#animation
anim = FuncAnimation(fig, update, frames=100, fargs=(mx, line), interval=67)
plt.show()


